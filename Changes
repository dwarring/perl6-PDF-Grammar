{{$NEXT}}
  - 2022 modernization
    -- enable github testing; retire travis
    -- remove 'use v6' from sources
    -- retire deprecated PDF::Grammar::Doc

0.2.7  2022-04-01T07:34:09+13:00
  - Release via zef

0.2.6  2021-06-20T11:38:09+12:00
  - Remove api from META6

0.2.5  2021-01-12T05:41:35+13:00
  - Release via CPAN
Release 0.2.4
- Replaced PDF::Grammar:::Content <unknown> rule with <suspect>. This
  returns operation with unknown operators or incorrect arguments
Release 0.2.3
- Fixing parsing of '42.' (trailing DP no fractional part). Replaced
  <real> token with <numeric>
Release 0.2.2
- Support postscript radix numbers in postscript functions, e.g.
  '16#AE'. These are not ruled out by the spec
Release 0.2.1
- Changed xref AST; now builds a contigous native shaped array
  with explicit object numbers.
Release 0.2.0
- Renamed module sources *.pm -> *.rakumod
Release 0.1.6
- Changed PDF::Grammar::COS penultimate token and AST
  element from 'pdf' to 'cos'
- Tweak parsing of inline content BI .. EI image data
Release 0.1.5
- Changed handling of BX .. EX extended blocks. These are
  now parsed, rather than being skipped.
- Fixed PDF::Grammar::Content 'SCN' and 'scn' operators.
Release 0.1.4
- Renamed base class PDF::Grammar::Doc -> PDF::Grammar::COS
  (Carousel Object System). After finding this blog
  http://jimpravetz.com/blog/2012/12/in-defense-of-cos/
Release 0.1.3
- Allow Zero length name '/'. Can occur in empty AcroForm fields.
- Changed AST for PostScript 'if' and 'ifelse'. Now returns a 'cond' node.
- Added :strict option to PDF::Grammar::Content::Actions. Will cause parser
  to abort whith an error when unrecognised content is encountered.

Release 0.1.2
- Optimized hex string parsing. Hex codes in names must have 2-digits
- Avoid shape errors in xref sections, when actual entries and
  object count don't match (let PDF::Reader detect and handle this).
- Regen META6.json via mi6.

Release 0.1.1
- PDF::Grammar::Doc::Actions now produces compact uint64 shaped indexes
- Change PDF::Grammar :AST-Types from a Set to an Enum.
- Allow whitespace between trailer dict and 'startxref'

Release 0.1.0
- Changed xref entries AST from a hash to a uint32 @array[3]

Release 0.0.8
- Renamed tokens char_delimiter -> char-delimiter, literal_delimiter -> literal-delimiter
- remove custom PDF::Grammar.parsefile method. Not needed in latest rakudo

Release 0.0.7
- Optimized stream and image tokens
- Added PDF::Grammar::Content::Fast. A faster, more forgiving
  alternative to PDF::Grammar::Content

Release 0.0.6
- Make META.info version consistent with PDF::Grammar:ver<...>
- Declare "perl6" : "6" in META.info
- new <xref-first> rule. A variation of <xref> that assumes we've
  hopped over the first few bytes. Needed by PDF::Reader to (gulp)
  handle the /T offset entry in linearization dictionary.
- minor optimisations to <ws> and <name> rules
- replaced a couple of regex with rules/tokens
- <xref-section> - allow zero <xref-entry>'s
  As observed in some real-world PDF's

Release 0.0.5
- Replaced JSON::Tiny with JSON::Fast
- Removed PDF::Grammar::Stream
- Slightly relax trailer parse. Don't require a \n before trailer dictionary
- Fixed whitespace handling in <PDF::Grammar::Doc::ind-obj-nibble> rule

Release 0.0.4
- Added `AST Reference` section to README.
- Renamed a couple of token tags for consistency:
     -- object-first-num => obj-first-num
     -- object-count => obj-count

Release 0.0.3
- Reworked 'stream' AST to return :encoded stream content. Rather
  than :start and :end positions of the stream.

  This was originally intended as a optimization. In practice the reader
  only uses this rule in :repair mode, in which case it always extracts
  the stream data anyway.

- tweaked ind-obj-nibble rule to use .codes rather than .chars to compute
  offset of stream start - safer in a post-NFG world. Latin encoding now
  has "\n\r" as a combining newline character.

Release 0.0.2
- General fixes for the 2015 Rakudo GLR

Release 0.0.1
- Initial development
